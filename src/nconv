#!/bin/sh

#-------------------------------------------------------------------------------
# Copyright 2020 Dominik Salvet
# github.com/dominiksalvet/nconv
#-------------------------------------------------------------------------------
# DESCRIPTION:
#   This is a simple binary-decimal converter intended for a terminal use.
# PARAMETERS:
#   All given arguments are processed as nconv help describes.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# PROGRAM INITIALIZATION
#-------------------------------------------------------------------------------

# PARAMETERS:
#   $@ - nconv arguments
main() {
    init_constants &&
    init_strings &&
    init_opts &&
    process_args "$@"
}

init_constants() {
    readonly VERSION=0.1.0 # the current nconv version
}

init_strings() {
    readonly HELP_MESSAGE='USAGE:
  nconv [OPTION...] NUMBER...
  nconv help | about

OPTION:
  -b/-d/-h  binary/decimal/hexadecimal input
  -s/-u     signed/unsigned input
  -B/-D/-H  binary/decimal/hexadecimal output
  -W WIDTH  output width'

    readonly ABOUT_MESSAGE="nconv $VERSION
Binary, decimal and hexadecimal converter.

Copyright 2020 Dominik Salvet
github.com/dominiksalvet/nconv"
}

init_opts() {
    input_radix= # bin, dec, hex
    input_sign= # signed, unsigned
    output_radix= # bin, dec, hex
    output_width= # a positive number
}

#-------------------------------------------------------------------------------
# ARGUMENT PROCESSING
#-------------------------------------------------------------------------------

# PARAMETERS:
#   $@ - nconv arguments
process_args() (
    case "$1" in
        help) echo "$HELP_MESSAGE" ;;
        about) echo "$ABOUT_MESSAGE" ;;
        *)  process_opts "$@" &&
            shift "$((OPTIND - 1))" && # shift to numbers
            process_nums "$@" ;;
    esac
)

# PARAMETERS:
#   $@ - nconv options
process_opts() {
    while getopts :bdhsuBDHW: _opt; do
        case "$_opt" in
            b) input_radix=bin ;;
            d) input_radix=dec ;;
            h) input_radix=hex ;;
            s) input_sign=signed ;;
            u) input_sign=unsigned ;;

            B) output_radix=bin ;;
            D) output_radix=dec ;;
            H) output_radix=hex ;;

            W)  if ! [ "$OPTARG" -gt 0 ] 2>/dev/null; then
                    echo "invalid output width $OPTARG" >&2; return 1
                fi
                output_width="$OPTARG" ;;

            :) echo "option -$OPTARG requires an argument" >&2; return 1 ;;
            ?) echo "invalid option -$OPTARG" >&2; return 1 ;;
        esac
    done
}

# PARAMETERS:
#   $@ - numbers
process_nums() (
    if [ "$#" -eq 0 ]; then
        echo 'no number provided' >&2; return 1
    fi

    # missing conversion parameters are deduced from the first number
    init_conversion "$1" &&
    for num in "$@"; do
        convert_num "$num" || return
    done
)

#-------------------------------------------------------------------------------
# CONVERSION INITIALIZATION
#-------------------------------------------------------------------------------

# PARAMETERS:
#   $1 - major number
init_conversion() {
    init_input_radix "$1" &&
    init_input_sign "$1" &&
    init_output_radix
}

# PARAMETERS:
#   $1 - major number
init_input_radix() {
    if ! [ "$input_radix" ]; then
        if is_bin_num "$1"; then
            input_radix=bin;
        elif is_dec_num "$1"; then
            input_radix=dec;
        elif is_hex_num "$1"; then
            input_radix=hex;
        else
            echo "invalid major number $1" >&2; return 1
        fi
    fi
}

# PARAMETERS:
#   $1 - major number
init_input_sign() {
    if ! [ "$input_sign" ]; then
        case "$1" in
            -*) input_sign=signed ;;
            *) input_sign=unsigned ;;
        esac
    fi
}

init_output_radix() {
    if ! [ "$output_radix" ]; then
        case "$input_radix" in
            bin | hex) output_radix=dec ;;
            dec) output_radix=bin ;;
            *) echo 'invalid input radix' >&2; return 1
        esac
    fi
}

# PARAMETERS:
#   $1 - string
is_bin_num() {
    echo "$1" | grep -qE '^[01]+$'
}

# PARAMETERS:
#   $1 - string
is_dec_num() {
    echo "$1" | grep -qE '^-?[[:digit:]]+$'
}

# PARAMETERS:
#   $1 - string
is_hex_num() {
    echo "$1" | grep -qE '^(0x|0X|)[[:xdigit:]]+$'
}

#-------------------------------------------------------------------------------
# CONVERSION
#-------------------------------------------------------------------------------

# PARAMETERS:
#   $1 - number
convert_num() {
    echo "convert $1 from $input_sign $input_radix to $output_radix of \
${output_width:-unlimited} width"
}

#-------------------------------------------------------------------------------
# CALL MAIN
#-------------------------------------------------------------------------------

main "$@"
