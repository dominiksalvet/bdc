#!/bin/sh

#-------------------------------------------------------------------------------
# Copyright 2020 Dominik Salvet
# github.com/dominiksalvet/nconv
#-------------------------------------------------------------------------------
# DESCRIPTION:
#   This is a simple binary-decimal converter intended for a terminal use.
# PARAMETERS:
#   All given arguments are processed as nconv help describes.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# INITIALIZATION
#-------------------------------------------------------------------------------

# PARAMETERS:
#   $@ - nconv arguments
main() {
    init_constants &&
    init_strings &&
    init_opts &&
    process_args "$@"
}

init_constants() {
    readonly VERSION=0.1.0 # the current nconv version
}

init_strings() {
    readonly HELP_MESSAGE='USAGE:
  nconv [OPTION...] NUMBER...
  nconv help | about

OPTION:
  -b/-d/-h  binary/decimal/hexadecimal input
  -s/-u     signed/unsigned input
  -B/-D/-H  binary/decimal/hexadecimal output
  -W WIDTH  output width'

    readonly ABOUT_MESSAGE="nconv $VERSION
Binary, decimal and hexadecimal converter.

Copyright 2020 Dominik Salvet
github.com/dominiksalvet/nconv"
}

init_opts() {
    force_input_radix=false
    input_radix= # bin, dec, hex
    force_input_sign=false
    input_sign= # signed, unsigned
    force_output_radix=false
    output_radix= # bin, dec, hex
    force_output_width=false
    output_width= # a positive number
}

#-------------------------------------------------------------------------------
# ARGUMENT PROCESSING
#-------------------------------------------------------------------------------

# PARAMETERS:
#   $@ - nconv arguments
process_args() (
    case "$1" in
        help) echo "$HELP_MESSAGE" ;;
        about) echo "$ABOUT_MESSAGE" ;;
        *)  process_opts "$@" &&
            shift "$((OPTIND - 1))" && # shift to numbers
            convert_nums "$@" ;;
    esac
)

# PARAMETERS:
#   $@ - nconv options
process_opts() {
    while getopts :bdhsuBDHW: _opt; do
        case "$_opt" in
            b) force_input_radix=true; input_radix=bin ;;
            d) force_input_radix=true; input_radix=dec ;;
            h) force_input_radix=true; input_radix=hex ;;
            s) force_input_sign=true; input_sign=signed ;;
            u) force_input_sign=true; input_sign=unsigned ;;

            B) force_output_radix=true; output_radix=bin ;;
            D) force_output_radix=true; output_radix=dec ;;
            H) force_output_radix=true; output_radix=hex ;;

            W)  if ! [ "$OPTARG" -gt 0 ] 2>/dev/null; then
                    echo "invalid output width $OPTARG" >&2; return 1
                fi
                force_output_width=true
                output_width="$OPTARG" ;;

            :) echo "option -$OPTARG requires an argument" >&2; return 1 ;;
            \?) echo "invalid option -$OPTARG" >&2; return 1 ;;
        esac
    done
}

#-------------------------------------------------------------------------------
# NUMBER CONVERSION
#-------------------------------------------------------------------------------

convert_nums() {
    if [ "$#" -eq 0 ]; then
        echo 'no number provided' >&2; return 1
    fi &&

    echo "force_input_radix = $force_input_radix" &&
    echo "input_radix = $input_radix" &&
    echo "force_input_sign = $force_input_sign" &&
    echo "input_sign = $input_sign" &&
    echo "force_output_radix = $force_output_radix" &&
    echo "output_radix = $output_radix" &&
    echo "force_output_width = $force_output_width" &&
    echo "output_width = $output_width" &&
    echo "numbers = $*"
}

#-------------------------------------------------------------------------------
# CALL MAIN
#-------------------------------------------------------------------------------

main "$@"
