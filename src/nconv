#!/bin/sh

#-------------------------------------------------------------------------------
# Copyright 2020 Dominik Salvet
# https://github.com/dominiksalvet/nconv
#-------------------------------------------------------------------------------
# This is a simple yet smart binary, decimal, and hexadecimal converter. This
# script is all you need. All arguments are processed as nconv help describes.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# GENERAL INITIALIZATION
#-------------------------------------------------------------------------------

# $@ - nconv arguments
main() {
    init_constants &&
    init_strings &&
    init_opts &&
    process_args "$@"
}

init_constants() {
    readonly VERSION=1.0.0 # the current nconv version
}

init_strings() {
    readonly HELP_MESSAGE='USAGE:
  nconv [OPTION...] [NUMBER...]
  nconv help | about

OPTION:
  -b/-d/-h  binary/decimal/hexadecimal input
  -s/-u     signed/unsigned input
  -B/-D/-H  binary/decimal/hexadecimal output
  -W WIDTH  number of output digits'

    readonly ABOUT_MESSAGE="nconv $VERSION
Binary, decimal, and hexadecimal converter.

Copyright 2020 Dominik Salvet
https://github.com/dominiksalvet/nconv"
}

init_opts() {
    # global variables
    input_radix= # bin, dec, hex
    input_sign= # signed, unsigned
    output_radix= # bin, dec, hex
    output_width= # a positive number
}

#-------------------------------------------------------------------------------
# ARGUMENT PROCESSING
#-------------------------------------------------------------------------------

# $@ - nconv arguments
process_args() (
    case "$1" in
        help) echo "$HELP_MESSAGE" ;;
        about) echo "$ABOUT_MESSAGE" ;;
        *)  process_opts "$@" &&
            shift "$((OPTIND - 1))" && # shift to number arguments
            if [ "$#" -eq 0 ]; then
                process_stdin # read numbers from standard input
            else
                process_num_args "$@"
            fi ;;
    esac
)

# $@ - nconv options
process_opts() {
    while getopts :bdhsuBDHW:0123456789 _opt; do
        case "$_opt" in
            b) input_radix=bin ;;
            d) input_radix=dec ;;
            h) input_radix=hex ;;
            s) input_sign=signed ;;
            u) input_sign=unsigned ;;

            B) output_radix=bin ;;
            D) output_radix=dec ;;
            H) output_radix=hex ;;
            W)  if ! [ "$OPTARG" -gt 0 ] 2>/dev/null; then
                    echo "E1: invalid output width $OPTARG" >&2; return 1
                fi
                output_width="$OPTARG" ;;

            [0-9]) OPTIND="$((OPTIND - 1))" && break ;; # negative dec number
            :) echo "E2: option -$OPTARG requires an argument" >&2; return 1 ;;
            ?) echo "E3: invalid option -$OPTARG" >&2; return 1 ;;
        esac || return
    done
}

process_stdin() {
    if [ -t 0 ]; then # stdin is open in a terminal (interactive mode)
        process_terminal_stdin
    else
        process_file_stdin # that includes also pipe input
    fi
}

process_terminal_stdin() (
    echo 'enter a number or press Ctrl+D to exit' >&2 &&
    # terminal input has more relaxed behavior than other input
    while IFS=' 	' read -r num; do
        (   init_conversion "$num" && # deduce missing parameters
            convert_num "$num"
        ) || return
    done
)

process_file_stdin() (
    if IFS= read -r first_num; then
        init_conversion "$first_num" &&
        convert_num "$first_num" &&

        while IFS= read -r num; do
            convert_num "$num" || return
        done
    fi
)

# $@ - numbers
process_num_args() (
    init_conversion "$1" &&
    for num in "$@"; do
        convert_num "$num" || return
    done
)

#-------------------------------------------------------------------------------
# CONVERSION INITIALIZATION
#-------------------------------------------------------------------------------

# $1 - number
init_conversion() {
    init_input_radix "$1" &&
    init_input_sign "$1" &&
    init_output_radix
}

# $1 - number
init_input_radix() {
    if ! [ "$input_radix" ]; then
        if is_bin_num "$1"; then
            input_radix=bin;
        elif is_dec_num "$1"; then
            input_radix=dec;
        elif is_hex_num "$1"; then
            input_radix=hex;
        else
            echo "E5: invalid number $1" >&2; return 1
        fi
    fi
}

# $1 - number
init_input_sign() {
    if ! [ "$input_sign" ]; then
        case "$1" in
            -*) input_sign=signed ;;
            *) input_sign=unsigned ;;
        esac
    fi
}

init_output_radix() {
    if ! [ "$output_radix" ]; then
        case "$input_radix" in
            bin | hex) output_radix=dec ;;
            dec) output_radix=bin ;;
            *) echo "E6: invalid input radix $input_radix" >&2; return 1
        esac
    fi
}

# $1 - number
is_bin_num() {
    is_single_line "$1" &&
    echo "$1" | grep -qE '^[01]+$'
}

# $1 - number
is_dec_num() {
    is_single_line "$1" &&
    echo "$1" | grep -qE '^-?[0-9]+$'
}

# $1 - number
is_hex_num() {
    is_single_line "$1" &&
    echo "$1" | grep -qE '^[0-9A-Fa-f]+$'
}

# $1 - string
is_single_line() (
    lineno="$(echo "$1" | wc -l)" &&
    test "$lineno" -eq 1
)

#-------------------------------------------------------------------------------
# CONVERSIONS
#-------------------------------------------------------------------------------

# $1 - number
convert_num() (
    case "$input_radix" in
        bin | dec | hex) ;;
        *) echo "E7: invalid input radix $input_radix" >&2; return 1 ;;
    esac &&
    case "$output_radix" in
        bin | dec | hex) ;;
        *) echo "E8: invalid output radix $output_radix" >&2; return 1 ;;
    esac &&

    check_"$input_radix" "$1" &&
    num="$("$input_radix"_to_bc"$output_radix" "$1")" &&
    num="$(bc"$output_radix"_to_canonical "$num")" &&
    if [ "$output_width" ]; then
        num="$(extend_c"$output_radix" "$num")"
    fi &&
    echo "$num"
)

# $1 - number
check_bin() {
    if ! is_bin_num "$1"; then
        echo "E9: invalid binary number $1" >&2; return 1
    fi
}

# $1 - number
check_dec() {
    if ! is_dec_num "$1"; then
        echo "E10: invalid decimal number $1" >&2; return 1
    elif [ "$input_sign" = unsigned ]; then
        case "$1" in -*)
            echo "E11: invalid unsigned decimal number $1" >&2; return 1 ;;
        esac
    fi
}

# $1 - number
check_hex() {
    if ! is_hex_num "$1"; then
        echo "E12: invalid hexadecimal number $1" >&2; return 1
    fi
}

#-------------------------------------------------------------------------------
# BINARY CONVERSION
#-------------------------------------------------------------------------------

# $1 - binary number
bin_to_bcbin() (
    num="$(echo "obase=2; ibase=2; $1" | bc)" &&
    if [ "$input_sign" = signed ] && starts_with "$1" 1; then
        num="$(echo "$num" | tr 01 10)" && # invert bits
        num="-$(echo "obase=2; ibase=2; $num + 1" | bc)"
    fi &&
    echo "$num"
)

# $1 - binary number
bin_to_bcdec() (
    bin_num="$(bin_to_bcbin "$1")" &&
    echo "ibase=2; $bin_num" | bc
)

# $1 - binary number
bin_to_bchex() (
    bin_num="$(bin_to_bcbin "$1")" &&
    echo "obase=16; ibase=2; $bin_num" | bc
)

# $1 - string
# $2 - characters
starts_with() {
    case "$1" in
        ["$2"]*) return 0 ;;
        *) return 1 ;;
    esac
}

# $1 - bc binary number
bcbin_to_canonical() (
    num="$1"
    if starts_with "$num" -; then
        num="$(echo "obase=2; ibase=2; -($num) - 1" | bc)" &&
        num="$(echo "0${num#0}" | tr 01 10)"
    elif [ "$input_sign" = signed ]; then
        num="0${num#0}"
    fi &&
    single_bc_line "$num"
)

# $1 - bc number
single_bc_line() {
    echo "$1" | sed ':a; N; s/\\\n//; ba' # print result as a single line
}

# $1 - canonical binary number
extend_cbin() (
    if [ "${#1}" -le "$output_width" ]; then
        extend_bit="$(get_extend_bit "$1")" &&
        num="$(printf "%${output_width}s" "$1")" &&
        echo "$num" | tr ' ' "$extend_bit"
    else
        echo "E13: could not fit $1 into $output_width digits" >&2; return 1
    fi
)

# $1 - canonical binary number
get_extend_bit() {
    if [ "$input_sign" = signed ]; then
        echo "$1" | cut -c 1 # most significant bit
    else
        echo 0
    fi
}

#-------------------------------------------------------------------------------
# DECIMAL CONVERSION
#-------------------------------------------------------------------------------

# $1 - decimal number
dec_to_bcbin() (
    dec_num="$(dec_to_bcdec "$1")" &&
    echo "obase=2; $dec_num" | bc
)

# $1 - decimal number
dec_to_bcdec() {
    echo "$1" | bc
}

# $1 - decimal number
dec_to_bchex() (
    dec_num="$(dec_to_bcdec "$1")" &&
    echo "obase=16; $dec_num" | bc
)

# $1 - bc decimal number
bcdec_to_canonical() {
    single_bc_line "$1"
}

# $1 - canonical decimal number
extend_cdec() (
    abs_num="${1#-}"
    if [ "${#abs_num}" -le "$output_width" ]; then
        abs_num="$(printf "%${output_width}s" "$abs_num")" &&
        abs_num="$(echo "$abs_num" | tr ' ' 0)" &&
        echo "${1%%[^-]*}$abs_num" # print also sign if it was present
    else
        echo "E14: could not fit $1 into $output_width digits" >&2; return 1
    fi
)

#-------------------------------------------------------------------------------
# HEXADECIMAL CONVERSION
#-------------------------------------------------------------------------------

# $1 - hexadecimal number
hex_to_bcbin() (
    hex_num="$(hex_to_bchex "$1")" &&
    echo "obase=2; ibase=16; $hex_num" | bc
)

# $1 - hexadecimal number
hex_to_bcdec() (
    hex_num="$(hex_to_bchex "$1")" &&
    echo "ibase=16; $hex_num" | bc
)

# $1 - hexadecimal number
hex_to_bchex() (
    num="$(echo "$1" | tr abcdef ABCDEF)" && # to uppercase
    num="$(echo "obase=16; ibase=16; $num" | bc)" &&
    if [ "$input_sign" = signed ] && starts_with "$1" 89ABCDEF; then
        num="$(echo "$num" | tr 0123456789ABCDEF FEDCBA9876543210)" && # invert
        num="-$(echo "obase=16; ibase=16; $num + 1" | bc)"
    fi &&
    echo "$num"
)

# $1 - bc hexadecimal number
bchex_to_canonical() (
    num="$1"
    if starts_with "$num" -; then
        num="$(echo "obase=16; ibase=16; -($num) - 1" | bc)" &&
        num="$(echo "$num" | tr 0123456789ABCDEF FEDCBA9876543210)" &&
        if starts_with "$num" 01234567; then
            num="F$num"
        fi
    elif [ "$input_sign" = signed ] && starts_with "$num" 89ABCDEF; then
        num="0$num"
    fi &&
    single_bc_line "$num"
)

# $1 - canonical hexadecimal number
extend_chex() (
    if [ "${#1}" -le "$output_width" ]; then
        extend_xdigit="$(get_extend_xdigit "$1")" &&
        num="$(printf "%${output_width}s" "$1")" &&
        echo "$num" | tr ' ' "$extend_xdigit"
    else
        echo "E15: could not fit $1 into $output_width digits" >&2; return 1
    fi
)

# $1 - canonical hexadecimal number
get_extend_xdigit() {
    if [ "$input_sign" = signed ] && starts_with "$1" 89ABCDEF; then
        echo F
    else
        echo 0
    fi
}

#-------------------------------------------------------------------------------
# CALL MAIN
#-------------------------------------------------------------------------------

main "$@"
