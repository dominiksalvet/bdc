#!/bin/sh

#-------------------------------------------------------------------------------
# Copyright 2020 Dominik Salvet
# https://github.com/dominiksalvet/nconv
#-------------------------------------------------------------------------------
# DESCRIPTION:
#   This is a simple binary-decimal converter intended for a terminal use.
# PARAMETERS:
#   All given arguments are processed as nconv help describes.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# GENERAL INITIALIZATION
#-------------------------------------------------------------------------------

# PARAMETERS:
#   $@ - nconv arguments
main() {
    init_constants &&
    init_strings &&
    init_opts &&
    process_args "$@"
}

init_constants() {
    readonly VERSION=0.2.0 # the current nconv version
}

init_strings() {
    readonly HELP_MESSAGE='USAGE:
  nconv [OPTION...] NUMBER...
  nconv help | about

OPTION:
  -b/-d/-h  binary/decimal/hexadecimal input
  -s/-u     signed/unsigned input
  -B/-D/-H  binary/decimal/hexadecimal output
  -W WIDTH  number of output digits'

    readonly ABOUT_MESSAGE="nconv $VERSION
Binary, decimal, and hexadecimal converter.

Copyright 2020 Dominik Salvet
https://github.com/dominiksalvet/nconv"
}

init_opts() {
    # global variables
    input_radix= # bin, dec, hex
    input_sign= # signed, unsigned
    output_radix= # bin, dec, hex
    output_width= # a positive number
}

#-------------------------------------------------------------------------------
# ARGUMENT PROCESSING
#-------------------------------------------------------------------------------

# PARAMETERS:
#   $@ - nconv arguments
process_args() (
    case "$1" in
        help) echo "$HELP_MESSAGE" ;;
        about) echo "$ABOUT_MESSAGE" ;;
        *)  process_opts "$@" &&
            shift "$((OPTIND - 1))" && # shift to numbers
            process_nums "$@" ;;
    esac
)

# PARAMETERS:
#   $@ - nconv options
process_opts() {
    while getopts :bdhsuBDHW:0123456789 _opt; do
        case "$_opt" in
            b) input_radix=bin ;;
            d) input_radix=dec ;;
            h) input_radix=hex ;;
            s) input_sign=signed ;;
            u) input_sign=unsigned ;;

            B) output_radix=bin ;;
            D) output_radix=dec ;;
            H) output_radix=hex ;;

            W)  if ! [ "$OPTARG" -gt 0 ] 2>/dev/null; then
                    echo "invalid output width $OPTARG" >&2; return 1
                fi
                output_width="$OPTARG" ;;

            [0-9]) OPTIND="$((OPTIND - 1))" && break ;; # negative dec number
            :) echo "option -$OPTARG requires an argument" >&2; return 1 ;;
            ?) echo "invalid option -$OPTARG" >&2; return 1 ;;
        esac || return
    done
}

# PARAMETERS:
#   $@ - numbers
process_nums() (
    if [ "$#" -eq 0 ]; then
        echo 'no number provided' >&2; return 1
    fi

    # missing conversion parameters are deduced from the first number
    init_conversion "$1" &&
    for num in "$@"; do
        result="$(convert_num "$num")" &&
        # print result as a single line
        echo "$result" | sed ':a; N; s/\\\n//; ba' || return
    done
)

#-------------------------------------------------------------------------------
# CONVERSION INITIALIZATION
#-------------------------------------------------------------------------------

# PARAMETERS:
#   $1 - main number
init_conversion() {
    init_input_radix "$1" &&
    init_input_sign "$1" &&
    init_output_radix
}

# PARAMETERS:
#   $1 - main number
init_input_radix() {
    if ! [ "$input_radix" ]; then
        if is_bin_num "$1"; then
            input_radix=bin;
        elif is_dec_num "$1"; then
            input_radix=dec;
        elif is_hex_num "$1"; then
            input_radix=hex;
        else
            echo "invalid main number $1" >&2; return 1
        fi
    fi
}

# PARAMETERS:
#   $1 - main number
init_input_sign() {
    if ! [ "$input_sign" ]; then
        case "$1" in
            -*) input_sign=signed ;;
            *) input_sign=unsigned ;;
        esac
    fi
}

init_output_radix() {
    if ! [ "$output_radix" ]; then
        case "$input_radix" in
            bin | hex) output_radix=dec ;;
            dec) output_radix=bin ;;
            *) echo "invalid input radix $input_radix" >&2; return 1
        esac
    fi
}

# PARAMETERS:
#   $1 - number
is_bin_num() {
    echo "$1" | grep -q '^[01]\+$'
}

# PARAMETERS:
#   $1 - number
is_dec_num() {
    echo "$1" | grep -q '^-\?[0123456789]\+$'
}

# PARAMETERS:
#   $1 - number
is_hex_num() {
    echo "$1" | grep -q '^[0123456789ABCDEF]\+$'
}

#-------------------------------------------------------------------------------
# CONVERSIONS
#-------------------------------------------------------------------------------

# PARAMETERS:
#   $1 - number
convert_num() (
    case "$input_radix" in
        bin | dec | hex) ;;
        *) echo "invalid input radix $input_radix" >&2; return 1 ;;
    esac &&
    case "$output_radix" in
        bin | dec | hex) ;;
        *) echo "invalid output radix $output_radix" >&2; return 1 ;;
    esac &&

    check_"$input_radix" "$1" &&
    num="$("$input_radix"_to_c"$output_radix" "$1")" &&
    format_c"$output_radix" "$num"
)

# PARAMETERS:
#   $1 - number
check_bin() {
    if ! is_bin_num "$1"; then
        echo "invalid binary number $1" >&2; return 1
    fi
}

# PARAMETERS:
#   $1 - number
check_dec() {
    if ! is_dec_num "$1"; then
        echo "invalid decimal number $1" >&2; return 1
    elif [ "$input_sign" = unsigned ]; then
        case "$1" in -*)
            echo "invalid unsigned decimal number $1" >&2; return 1 ;;
        esac
    fi
}

# PARAMETERS:
#   $1 - number
check_hex() {
    if ! is_hex_num "$1"; then
        echo "invalid hexadecimal number $1" >&2; return 1
    fi
}

#-------------------------------------------------------------------------------
# BINARY CONVERSION
#-------------------------------------------------------------------------------

# PARAMETERS:
#   $1 - binary number
bin_to_cbin() {
    canonical_bin "$1"
}

# PARAMETERS:
#   $1 - binary number
bin_to_cdec() (
    bin_num="$(canonical_bin "$1")" &&
    echo "ibase=2; $bin_num" | bc
)

# PARAMETERS:
#   $1 - binary number
bin_to_chex() (
    bin_num="$(canonical_bin "$1")" &&
    echo "obase=16; ibase=2; $bin_num" | bc
)

# PARAMETERS:
#   $1 - binary number
canonical_bin() (
    num="$(echo "obase=2; ibase=2; $1" | bc)" &&
    if [ "$input_sign" = signed ] && starts_with "$1" 1; then
        num="$(echo "$num" | tr 01 10)" && # invert bits
        num="-$(echo "obase=2; ibase=2; $num + 1" | bc)"
    fi &&
    echo "$num"
)

# PARAMETERS:
#   $1 - string
#   $2 - characters
starts_with() {
    case "$1" in
        ["$2"]*) return 0 ;;
        *) return 1 ;;
    esac
}

# PARAMETERS:
#   $1 - canonical binary number
format_cbin() (
    if starts_with "$1" -; then
        num="$(echo "obase=2; ibase=2; -($1) - 1" | bc)" &&
        echo "0${num#0}" | tr 01 10
    elif [ "$input_sign" = signed ]; then
        echo "0${1#0}"
    else
        echo "$1"
    fi
)

#-------------------------------------------------------------------------------
# DECIMAL CONVERSION
#-------------------------------------------------------------------------------

# PARAMETERS:
#   $1 - decimal number
dec_to_cbin() (
    dec_num="$(canonical_dec "$1")" &&
    echo "obase=2; $dec_num" | bc
)

# PARAMETERS:
#   $1 - decimal number
dec_to_cdec() {
    canonical_dec "$1"
}

# PARAMETERS:
#   $1 - decimal number
dec_to_chex() (
    dec_num="$(canonical_dec "$1")" &&
    echo "obase=16; $dec_num" | bc
)

# PARAMETERS:
#   $1 - decimal number
canonical_dec() {
    echo "$1" | bc
}

# PARAMETERS:
#   $1 - canonical decimal number
format_cdec() {
    echo "format_cdec $1"
}

#-------------------------------------------------------------------------------
# HEXADECIMAL CONVERSION
#-------------------------------------------------------------------------------

# PARAMETERS:
#   $1 - hexadecimal number
hex_to_cbin() (
    hex_num="$(canonical_hex "$1")" &&
    echo "obase=2; ibase=16; $hex_num" | bc
)

# PARAMETERS:
#   $1 - hexadecimal number
hex_to_cdec() (
    hex_num="$(canonical_hex "$1")" &&
    echo "ibase=16; $hex_num" | bc
)

# PARAMETERS:
#   $1 - hexadecimal number
hex_to_chex() {
    canonical_hex "$1"
}

# PARAMETERS:
#   $1 - hexadecimal number
canonical_hex() (
    num="$(echo "obase=16; ibase=16; $1" | bc)" &&
    if [ "$input_sign" = signed ] && starts_with "$1" 89ABCDEF; then
        num="$(echo "$num" | tr 0123456789ABCDEF FEDCBA9876543210)" && # invert
        num="-$(echo "obase=16; ibase=16; $num + 1" | bc)"
    fi &&
    echo "$num"
)

# PARAMETERS:
#   $1 - canonical hexadecimal number
format_chex() (
    num="$1"
    if starts_with "$num" -; then
        num="$(echo "obase=16; ibase=16; -($num) - 1" | bc)" &&
        num="$(echo "$num" | tr 0123456789ABCDEF FEDCBA9876543210)" &&
        if starts_with "$num" 01234567; then
            num="F$num"
        fi
    elif [ "$input_sign" = signed ] && starts_with "$num" 89ABCDEF; then
        num="0$num"
    fi &&
    echo "$num"
)

#-------------------------------------------------------------------------------
# CALL MAIN
#-------------------------------------------------------------------------------

main "$@"
